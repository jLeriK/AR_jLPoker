import {Telegraf} from 'telegraf';
import db from './db.js';
import {v4 as uuidv4} from 'uuid';

const token = 'BOTTOKEN';
const bot = new Telegraf(token);
const admins = [966402438];

// In-memory storage for active games
const games = {};

// Game states
const GAME_STATES = {
    WAITING: 'waiting',
    BETTING_ROUND_1: 'betting_round_1',
    BETTING_ROUND_2: 'betting_round_2',
    BETTING_ROUND_3: 'betting_round_3',
    FINALIZING: 'finalizing'
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –º–µ—Ç–∫–∏ —Ä–∞—É–Ω–¥–∞ –≤ Markdown
function getRoundLabel(state) {
    switch (state) {
        case GAME_STATES.BETTING_ROUND_1:
            return '1Ô∏è‚É£ ùë≠ùë∞ùëπùë∫ùëª ùëπùë∂ùëºùëµùë´ 1Ô∏è‚É£'
        case GAME_STATES.BETTING_ROUND_2:
            return '2Ô∏è‚É£ ùë∫ùë¨ùë™ùë∂ùëµùë´ ùëπùë∂ùëºùëµùë´ 2Ô∏è‚É£';
        case GAME_STATES.BETTING_ROUND_3:
            return 'üèÅ ùë≥ùë®ùë∫ùëª ùëπùë∂ùëºùëµùë´ üèÅ';
        default:
            return '';
    }
}
bot.start((ctx) => {
    const userName = ctx.from.username || ctx.from.first_name || 'Unknown';
    const userId = ctx.from.id;

    db.run(
        'INSERT OR IGNORE INTO users (id, username, balance) VALUES (?, ?, ?)',
        [userId, userName, 100],
        (err) => {
            if (err) {
                console.error('DB insert error:', err.message);
            }
        }
    );

    ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', {
        reply_markup: {
            keyboard: [
                [{ text: 'üí∞ –ú–æ–π –±–∞–ª–∞–Ω—Å üí∞' }, { text: 'üéÆ –°–æ–∑–¥–∞—Ç—å –∏–≥—Ä—É üéÆ' }],
                [{ text: 'üÉè –ö–æ–º–±–∏–Ω–∞—Ü–∏–∏ üÉè' }, { text: 'üîç –ù–∞–π—Ç–∏ –∏–≥—Ä—É üîç' }]
            ],
            resize_keyboard: true,
            one_time_keyboard: true
        }
    });
});

bot.hears('üí∞ –ú–æ–π –±–∞–ª–∞–Ω—Å üí∞', (ctx) => {
    const userId = ctx.from.id;

    db.get('SELECT balance FROM users WHERE id = ?', [userId], (err, row) => {
        if (err) {
            console.error('DB read error:', err.message);
            return ctx.reply('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞.');
        }

        if (row) {
            ctx.reply(`–í–∞—à –±–∞–ª–∞–Ω—Å: ${row.balance} –º–æ–Ω–µ—Ç ü™ô`);
        } else {
            ctx.reply('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ù–∞–ø–∏—à–∏—Ç–µ /start');
        }
    });
});

bot.command('money', (ctx) => {
    const userId = ctx.from.id;
    const messageText = ctx.message.text.trim();
    const parts = messageText.split(' ');

    if (parts.length === 4 && parts[1] === 'edit') {
        if (!admins.includes(userId)) {
            return ctx.reply('‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å /money edit.');
        }

        const targetId = parseInt(parts[2]);
        const newBalance = parseInt(parts[3]);

        if (isNaN(targetId) || isNaN(newBalance)) {
            return ctx.reply('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /money edit <id> <–±–∞–ª–∞–Ω—Å>');
        }

        db.run(
            'UPDATE users SET balance = ? WHERE id = ?',
            [newBalance, targetId],
            function (err) {
                if (err) {
                    console.error('DB update error:', err.message);
                    return ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞.');
                }

                if (this.changes === 0) {
                    ctx.reply('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω.');
                } else {
                    ctx.reply(`‚úÖ –ë–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${targetId} –∏–∑–º–µ–Ω—ë–Ω –Ω–∞ ${newBalance} –º–æ–Ω–µ—Ç.`);
                }
            }
        );
    } else {
        db.all('SELECT id, username, balance FROM users', (err, rows) => {
            if (err) {
                console.error('DB read error:', err.message);
                return ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö.');
            }

            if (rows.length === 0) {
                return ctx.reply('üì≠ –ù–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.');
            }

            const message = rows
                .map(u => `üë§ ID: ${u.id}, @${u.username || '–ë–µ–∑ –∏–º–µ–Ω–∏'} ‚Äî üí∞ ${u.balance} –º–æ–Ω–µ—Ç`)
                .join('\n');
            ctx.reply(`üìä –ë–∞–ª–∞–Ω—Å—ã –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n\n${message}`);
        });
    }
});

bot.hears('üÉè –ö–æ–º–±–∏–Ω–∞—Ü–∏–∏ üÉè', (ctx) => {
    ctx.replyWithMediaGroup([
        {
            type: 'photo',
            media: 'https://i.pinimg.com/originals/f8/30/68/f83068bda5d75dfbee9031dcc9ad0a4a.jpg'
        }
    ]);
});

bot.hears('üéÆ –°–æ–∑–¥–∞—Ç—å –∏–≥—Ä—É üéÆ', (ctx) => {
    const userId = ctx.from.id;
    const userName = ctx.from.username || ctx.from.first_name || 'Unknown';
    const gameId = uuidv4();

    games[gameId] = {
        state: GAME_STATES.WAITING,
        dealer: { id: userId, username: userName },
        players: [{ id: userId, username: userName, bet: 0, folded: false }],
        pot: 0,
        currentBet: 0,
        currentPlayerIndex: 0,
        round: 1
    };

    ctx.reply(`üé≤ –ò–≥—Ä–∞ —Å–æ–∑–¥–∞–Ω–∞! ID –∏–≥—Ä—ã: ${gameId}\n–í—ã —è–≤–ª—è–µ—Ç–µ—Å—å –¥–∏–ª–µ—Ä–æ–º.\n–û–∂–∏–¥–∞–µ–º –∏–≥—Ä–æ–∫–æ–≤...`, {
        reply_markup: {
            inline_keyboard: [
                [{ text: '–ù–∞—á–∞—Ç—å –∏–≥—Ä—É', callback_data: `start_game_${gameId}` }],
                [{ text: '–û—Ç–º–µ–Ω–∏—Ç—å –∏–≥—Ä—É', callback_data: `cancel_game_${gameId}` }]
            ]
        }
    });
});

bot.hears('üîç –ù–∞–π—Ç–∏ –∏–≥—Ä—É üîç', (ctx) => {
    const activeGames = Object.keys(games).filter(id => games[id].state === GAME_STATES.WAITING);
    if (activeGames.length === 0) {
        return ctx.reply('–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∏–≥—Ä.');
    }

    const buttons = activeGames.map(id => [{
        text: `–ò–≥—Ä–∞ ${id.slice(0, 8)}... (–î–∏–ª–µ—Ä: @${games[id].dealer.username})`,
        callback_data: `join_game_${id}`
    }]);

    ctx.reply('–î–æ—Å—Ç—É–ø–Ω—ã–µ –∏–≥—Ä—ã:', {
        reply_markup: {
            inline_keyboard: buttons
        }
    });
});

bot.action(/join_game_(.+)/, (ctx) => {
    const gameId = ctx.match[1];
    const userId = ctx.from.id;
    const userName = ctx.from.username || ctx.from.first_name || 'Unknown';

    if (!games[gameId] || games[gameId].state !== GAME_STATES.WAITING) {
        return ctx.reply('–ò–≥—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ —É–∂–µ –Ω–∞—á–∞–ª–∞—Å—å.');
    }

    if (games[gameId].players.some(p => p.id === userId)) {
        return ctx.reply('–í—ã —É–∂–µ –≤ —ç—Ç–æ–π –∏–≥—Ä–µ.');
    }

    games[gameId].players.push({ id: userId, username: userName, bet: 0, folded: false });

    ctx.reply(`–í—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –∫ –∏–≥—Ä–µ ${gameId}! –û–∂–∏–¥–∞–µ–º –Ω–∞—á–∞–ª–∞...`);
    bot.telegram.sendMessage(
        games[gameId].dealer.id,
        `–ò–≥—Ä–æ–∫ @${userName} –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ –∏–≥—Ä–µ ${gameId}.`
    );
});

bot.action(/start_game_(.+)/, (ctx) => {
    const gameId = ctx.match[1];
    const userId = ctx.from.id;

    if (!games[gameId] || games[gameId].dealer.id !== userId) {
        return ctx.reply('–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å —ç—Ç—É –∏–≥—Ä—É.');
    }

    if (games[gameId].players.length < 2) {
        return ctx.reply('–ù—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º 2 –∏–≥—Ä–æ–∫–∞ –¥–ª—è –Ω–∞—á–∞–ª–∞ –∏–≥—Ä—ã.');
    }

    games[gameId].state = GAME_STATES.BETTING_ROUND_1;
    notifyCurrentPlayer(gameId, ctx);
});

bot.action(/cancel_game_(.+)/, (ctx) => {
    const gameId = ctx.match[1];
    const userId = ctx.from.id;

    if (!games[gameId] || games[gameId].dealer.id !== userId) {
        return ctx.reply('–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å —ç—Ç—É –∏–≥—Ä—É.');
    }

    games[gameId].players.forEach(player => {
        bot.telegram.sendMessage(player.id, `–ò–≥—Ä–∞ ${gameId} –±—ã–ª–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞ –¥–∏–ª–µ—Ä–æ–º.`);
    });

    delete games[gameId];
    ctx.reply('–ò–≥—Ä–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.');
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —Å—Ç–∞–≤–∫–∏
bot.hears(/^\d+$/, (ctx) => {
    const userId = ctx.from.id;
    const amount = parseInt(ctx.message.text);

    // –ù–∞–π—Ç–∏ –∏–≥—Ä—É, –≥–¥–µ —ç—Ç–æ—Ç –∏–≥—Ä–æ–∫ —Å–µ–π—á–∞—Å —Ö–æ–¥–∏—Ç
    const gameId = Object.keys(games).find(id => {
        const game = games[id];
        return game.state !== GAME_STATES.WAITING &&
            game.state !== GAME_STATES.FINALIZING &&
            game.players[game.currentPlayerIndex].id === userId;
    });

    if (!gameId) {
        return ctx.reply('–°–µ–π—á–∞—Å –Ω–µ –≤–∞—à —Ö–æ–¥ –∏–ª–∏ –≤—ã –Ω–µ –≤ –∏–≥—Ä–µ.');
    }

    const game = games[gameId];
    const player = game.players[game.currentPlayerIndex];
    const toCall = game.currentBet - player.bet;

    if (amount < toCall) {
        return ctx.reply(`–ù—É–∂–Ω–æ –ø–æ—Å—Ç–∞–≤–∏—Ç—å –º–∏–Ω–∏–º—É–º ${toCall} –º–æ–Ω–µ—Ç, —á—Ç–æ–±—ã —É—Ä–∞–≤–Ω—è—Ç—å —Å—Ç–∞–≤–∫—É.`);
    }

    if (amount <= 0) {
        return ctx.reply('–°—Ç–∞–≤–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ 0.');
    }

    db.get('SELECT balance FROM users WHERE id = ?', [userId], (err, row) => {
        if (err || !row || row.balance < amount) {
            return ctx.reply('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç –∏–ª–∏ –æ—à–∏–±–∫–∞.');
        }

        db.run(
            'UPDATE users SET balance = balance - ? WHERE id = ?',
            [amount, userId],
            (err) => {
                if (err) {
                    console.error('DB update error:', err.message);
                    return ctx.reply('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞.');
                }

                game.pot += amount;
                player.bet += amount;
                game.currentBet = Math.max(game.currentBet, player.bet);

                advanceTurn(gameId, ctx);
            }
        );
    });
});

bot.action(/check_(.+)/, (ctx) => {
    const gameId = ctx.match[1];
    const userId = ctx.from.id;

    if (!games[gameId] || games[gameId].players[games[gameId].currentPlayerIndex].id !== userId) {
        return ctx.reply('–°–µ–π—á–∞—Å –Ω–µ –≤–∞—à —Ö–æ–¥.');
    }

    const toCall = games[gameId].currentBet - games[gameId].players[games[gameId].currentPlayerIndex].bet;
    if (toCall > 0) {
        return ctx.reply('–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ —Å–¥–µ–ª–∞—Ç—å —á–µ–∫, –Ω—É–∂–Ω–æ —É—Ä–∞–≤–Ω—è—Ç—å —Å—Ç–∞–≤–∫—É.');
    }

    advanceTurn(gameId, ctx);
});

bot.action(/fold_(.+)/, (ctx) => {
    const gameId = ctx.match[1];
    const userId = ctx.from.id;

    if (!games[gameId] || games[gameId].players[games[gameId].currentPlayerIndex].id !== userId) {
        return ctx.reply('–°–µ–π—á–∞—Å –Ω–µ –≤–∞—à —Ö–æ–¥.');
    }

    games[gameId].players[games[gameId].currentPlayerIndex].folded = true;
    advanceTurn(gameId, ctx);
});

function advanceTurn(gameId, ctx) {
    const game = games[gameId];
    game.currentPlayerIndex = (game.currentPlayerIndex + 1) % game.players.length;

    // Check if all active players have matched the current bet or folded
    const activePlayers = game.players.filter(p => !p.folded);
    const allBetsEqual = activePlayers.every(p => p.bet === game.currentBet || p.folded);

    if (game.currentPlayerIndex === 0 && allBetsEqual && activePlayers.length > 1) {
        // Move to next round
        if (game.state === GAME_STATES.BETTING_ROUND_1) {
            game.state = GAME_STATES.BETTING_ROUND_2;
            game.currentBet = 0;
            game.players.forEach(p => p.bet = 0);
            notifyPlayers(gameId, '–ù–∞—á–∞–ª—Å—è –≤—Ç–æ—Ä–æ–π —Ä–∞—É–Ω–¥ —Å—Ç–∞–≤–æ–∫.');
        } else if (game.state === GAME_STATES.BETTING_ROUND_2) {
            game.state = GAME_STATES.BETTING_ROUND_3;
            game.currentBet = 0;
            game.players.forEach(p => p.bet = 0);
            notifyPlayers(gameId, '–ù–∞—á–∞–ª—Å—è —Ç—Ä–µ—Ç–∏–π —Ä–∞—É–Ω–¥ —Å—Ç–∞–≤–æ–∫.');
        } else if (game.state === GAME_STATES.BETTING_ROUND_3) {
            game.state = GAME_STATES.FINALIZING;
            finalizeGame(gameId, ctx);
            return;
        }
    }

    // If only one player remains, end the game
    if (activePlayers.length === 1) {
        game.state = GAME_STATES.FINALIZING;
        finalizeGame(gameId, ctx);
        return;
    }

    notifyCurrentPlayer(gameId, ctx);
}

function notifyCurrentPlayer(gameId, ctx) {
    const game = games[gameId];
    const player = game.players[game.currentPlayerIndex];

    if (player.folded) {
        advanceTurn(gameId, ctx);
        return;
    }

    const toCall = game.currentBet - player.bet;
    const buttons = [[{ text: '–°–±—Ä–æ—Å–∏—Ç—å', callback_data: `fold_${gameId}` }]];

    if (toCall === 0) {
        buttons.unshift([{ text: '–ß–µ–∫', callback_data: `check_${gameId}` }]);
    }

    bot.telegram.sendMessage(
        player.id,
        `${getRoundLabel(game.state)}\n\n` +
        `–í–∞—à —Ö–æ–¥ –≤ –∏–≥—Ä–µ.\n` +
        `–¢–µ–∫—É—â–∞—è —Å—Ç–∞–≤–∫–∞: ${game.currentBet} –º–æ–Ω–µ—Ç.\n` +
        `–í–∞—à —Ç–µ–∫—É—â–∏–π –≤–∑–Ω–æ—Å: ${player.bet} –º–æ–Ω–µ—Ç.\n` +
        `–ë–∞–Ω–∫: ${game.pot} –º–æ–Ω–µ—Ç.\n` +
        (toCall > 0
            ? `–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —Å—Ç–∞–≤–∫–∏ (–º–∏–Ω–∏–º—É–º ${toCall} –º–æ–Ω–µ—Ç –¥–ª—è —É—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏—è).`
            : `–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —Å—Ç–∞–≤–∫–∏ –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –ß–µ–∫.`),
        {
            reply_markup: {
                inline_keyboard: buttons
            }
        }
    );
}

function notifyPlayers(gameId, message) {
    const game = games[gameId];
    game.players.forEach(player => {
        if (!player.folded) {
            bot.telegram.sendMessage(player.id, message);
        }
    });
}

function finalizeGame(gameId, ctx) {
    const game = games[gameId];
    const activePlayers = game.players.filter(p => !p.folded);

    if (activePlayers.length === 1) {
        const winner = activePlayers[0];
        db.run(
            'UPDATE users SET balance = balance + ? WHERE id = ?',
            [game.pot, winner.id],
            (err) => {
                if (err) {
                    console.error('DB update error:', err.message);
                }
                notifyPlayers(gameId, `–ò–≥—Ä–∞ ${gameId} –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –ü–æ–±–µ–¥–∏—Ç–µ–ª—å: @${winner.username} –ø–æ–ª—É—á–∞–µ—Ç ${game.pot} –º–æ–Ω–µ—Ç!`);
                delete games[gameId];
            }
        );
    } else {
        const buttons = game.players
            .filter(p => !p.folded)
            .map(p => [{ text: `@${p.username}`, callback_data: `winner_${gameId}_${p.id}` }]);

        bot.telegram.sendMessage(
            game.dealer.id,
            `–ò–≥—Ä–∞ ${gameId} –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–±–µ–¥–∏—Ç–µ–ª—è:`,
            {
                reply_markup: {
                    inline_keyboard: buttons
                }
            }
        );
    }
}

bot.action(/winner_(.+)_(\d+)/, (ctx) => {
    const gameId = ctx.match[1];
    const winnerId = parseInt(ctx.match[2]);
    const userId = ctx.from.id;

    if (!games[gameId] || games[gameId].dealer.id !== userId) {
        return ctx.reply('–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å –ø–æ–±–µ–¥–∏—Ç–µ–ª—è.');
    }

    const winner = games[gameId].players.find(p => p.id === winnerId);
    if (!winner || winner.folded) {
        return ctx.reply('–ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π –ø–æ–±–µ–¥–∏—Ç–µ–ª—å.');
    }

    db.run(
        'UPDATE users SET balance = balance + ? WHERE id = ?',
        [games[gameId].pot, winnerId],
        (err) => {
            if (err) {
                console.error('DB update error:', err.message);
                return ctx.reply('–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–∏ –≤—ã–∏–≥—Ä—ã—à–∞.');
            }

            notifyPlayers(gameId, `–ò–≥—Ä–∞ ${gameId} –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –ü–æ–±–µ–¥–∏—Ç–µ–ª—å: @${winner.username} –ø–æ–ª—É—á–∞–µ—Ç ${games[gameId].pot} –º–æ–Ω–µ—Ç!`);
            delete games[gameId];
        }
    );
});

// –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
bot.launch()
    .then(() => console.log('Bot is running...'))
    .catch((err) => console.error('Bot launch failed:', err));